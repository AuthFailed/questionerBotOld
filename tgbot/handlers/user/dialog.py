import datetime
import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from infrastructure.database.models import User, Dialog
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.active_question import ActiveQuestion, ActiveQuestionWithCommand
from tgbot.keyboards.user.main import DialogQualitySpecialist, dialog_quality_kb
from tgbot.misc import dicts
from tgbot.services.logger import setup_logging

user_dialog_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@user_dialog_router.message(ActiveQuestionWithCommand("end"))
async def active_question_end(message: Message, stp_db, active_dialog_token: str = None):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        employee: User = await repo.users.get_user(message.from_user.id)
        dialog: Dialog = await repo.dialogs.get_dialog(token=active_dialog_token)

    logger.info(active_dialog_token)
    if dialog is not None:
        if dialog.Status != "closed":
            await repo.dialogs.update_dialog_status(token=dialog.Token, status="closed")
            await repo.dialogs.update_dialog_end(token=dialog.Token, end_time=datetime.datetime.now())

            await message.bot.send_message(chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId,  text=f"""<b>üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{employee.FIO}</b> –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥
–û—Ü–µ–Ω–∏, –º–æ–≥ –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ""", reply_markup=dialog_quality_kb(token=dialog.Token, role="duty"))

            await message.bot.edit_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId,
                                               icon_custom_emoji_id=dicts.topicEmojis["closed"])
            await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId)

            await message.reply(f"""<b>üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç</b>

–¢—ã –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥
–û—Ü–µ–Ω–∏, –ø–æ–º–æ–≥–ª–∏ –ª–∏ —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å""", reply_markup=dialog_quality_kb(token=dialog.Token, role="employee"))
        elif dialog.Status == "closed":
            await message.reply("<b>üîí –î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–∫—Ä—ã—Ç</b>")
            await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId)

    else:
        await message.answer(f"""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ""")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–ø–∏–∫ {message.message_thread_id}")


@user_dialog_router.message(ActiveQuestion())
async def active_question(message: Message, stp_db, active_dialog_token: str = None):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        dialog: Dialog = await repo.dialogs.get_dialog(token=active_dialog_token)

    await message.bot.copy_message(from_chat_id=message.chat.id, message_id=message.message_id,
                                   chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId)


@user_dialog_router.callback_query(DialogQualitySpecialist.filter())
async def dialog_quality_employee(callback: CallbackQuery, callback_data: DialogQualitySpecialist, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(user_id=callback.from_user.id)

    await repo.dialogs.update_dialog_quality(token=callback_data.token, quality=callback_data.answer, is_duty=False)
    await callback.answer("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è")
    if callback_data.answer:
        await callback.message.edit_text(f"""<b>üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç</b>

–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëç –°—Ç–∞—Ä—à–∏–π <b>–ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>""")
    else:
        await callback.message.edit_text(f"""<b>üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç</b>

–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëé –°—Ç–∞—Ä—à–∏–π <b>–Ω–µ –ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>""")
