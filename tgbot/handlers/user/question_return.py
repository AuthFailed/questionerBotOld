import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.keyboards.user.main import user_kb, MainMenu, ReturnQuestion, questions_list_kb, \
    question_confirm_kb
from tgbot.misc import dicts
from tgbot.services.logger import setup_logging

user_return_question_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@user_return_question_router.callback_query(MainMenu.filter(F.menu == "return"))
async def return_question_list(callback: CallbackQuery, stp_db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ 24 —á–∞—Å–∞"""
    async with stp_db() as session:
        repo = RequestsRepo(session)
        questions = await repo.dialogs.get_last_questions_by_chat_id(
            employee_chat_id=callback.from_user.id,
            limit=5
        )

    if not questions:
        await callback.message.edit_text(
            """<b>üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞</b>

üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞""",
            reply_markup=user_kb()
        )
        return

    await callback.message.edit_text(
        """<b>üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞</b>

üìã –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç–∏—è

<i>–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</i>""",
        reply_markup=questions_list_kb(questions)
    )


@user_return_question_router.callback_query(ReturnQuestion.filter(F.action == "show"))
async def return_question_show(callback: CallbackQuery, callback_data: ReturnQuestion, stp_db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    async with stp_db() as session:
        repo = RequestsRepo(session)
        question = await repo.dialogs.get_question(token=callback_data.token)

    if not question:
        await callback.message.edit_text(
            "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=user_kb()
        )
        return

    start_date_str = question.StartTime.strftime("%d.%m.%Y %H:%M")
    end_date_str = question.EndTime.strftime("%d.%m.%Y %H:%M") if question.EndTime else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    question_text = question.QuestionText[:200] + "..." if len(question.QuestionText) > 200 else question.QuestionText

    await callback.message.edit_text(f"""<b>üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞</b>

‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>
<blockquote expandable>{question_text}</blockquote>

üóÉÔ∏è <b>–†–µ–≥–ª–∞–º–µ–Ω—Ç:</b> <a href='{question.CleverLink}'>—Ç—ã–∫</a>

<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {start_date_str}
üîí <b>–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {end_date_str}

–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?""",
                                     reply_markup=question_confirm_kb(question.Token),
                                     disable_web_page_preview=True
                                     )


@user_return_question_router.callback_query(ReturnQuestion.filter(F.action == "confirm"))
async def return_question_confirm(callback: CallbackQuery, callback_data: ReturnQuestion, stp_db):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞"""
    await callback.answer()
    async with stp_db() as session:
        repo = RequestsRepo(session)
        user: User = await repo.users.get_user(user_id=callback.from_user.id)
        question = await repo.dialogs.get_question(token=callback_data.token)

    if not question:
        await callback.message.edit_text(
            "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=user_kb()
        )
        return

    active_dialogs = await repo.dialogs.get_active_questions()

    # Validation checks (same as existing restoration logic)
    if question.Status == "closed" and user.FIO not in [d.EmployeeFullname for d in active_dialogs]:
        # 1. Update question status to "open"
        await repo.dialogs.update_question_status(token=question.Token, status="open")

        # 2. Update forum topic name and icon
        await callback.bot.edit_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.TopicId,
            name=user.FIO,
            icon_custom_emoji_id=dicts.topicEmojis["in_progress"]
        )

        # 3. Reopen the forum topic
        await callback.bot.reopen_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.TopicId
        )

        # 4. Send confirmation messages
        await callback.message.edit_text(f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å—Ç–∞—Ä—à–µ–º—É""")

        await callback.bot.send_message(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.TopicId,
            text=f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{user.FIO}</b> –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        )
    elif user.FIO in [d.EmployeeFullname for d in active_dialogs]:
        await callback.answer("–£ —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True)
    elif question.Status != "closed":
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å", show_alert=True)
