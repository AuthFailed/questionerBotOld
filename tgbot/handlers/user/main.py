import datetime
import logging

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from infrastructure.database.models import User, Dialog
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.active_question import ActiveQuestion
from tgbot.keyboards.user.main import user_kb, MainMenu, back_kb, cancel_question_kb, DialogQualitySpecialist
from tgbot.misc import dicts
from tgbot.misc.states import Question
from tgbot.services.logger import setup_logging

user_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)

@user_router.message(CommandStart())
async def main_cmd(message: Message, state: FSMContext, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        user: User = await repo.users.get_user(user_id=message.from_user.id)

    division = "–ù–¢–ü" if config.tg_bot.division == "ntp" else "–ù–¶–ö"
    state_data = await state.get_data()

    if user:
        await message.answer(f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.FIO}</b>!

–Ø - –±–æ—Ç-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫ {division}

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</i>""",
                             reply_markup=user_kb(is_role_changed=True if state_data.get("role") else False))
    else:
        await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, <b>@{message.from_user.username}</b>!
        
–ù–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ì—Ä–∞—Ñ–∏–∫–æ–≤
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ú–∏–ü

–ï—Å–ª–∏ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ, –Ω–∞–ø–∏—à–∏ <b>/start</b>""")


@user_router.callback_query(MainMenu.filter(F.menu == "main"))
async def main_cb(callback: CallbackQuery, stp_db, state: FSMContext):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        user: User = await repo.users.get_user(user_id=callback.from_user.id)

    division = "–ù–¢–ü" if config.tg_bot.division == "ntp" else "–ù–¶–ö"
    state_data = await state.get_data()

    await callback.message.edit_text(f"""–ü—Ä–∏–≤–µ—Ç, <b>{user.FIO}</b>!

–Ø - –±–æ—Ç-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫ {division}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ""",
                                     reply_markup=user_kb(is_role_changed=True if state_data.get("role") else False))


@user_router.callback_query(MainMenu.filter(F.menu == "ask"))
async def ask_question(callback: CallbackQuery, state: FSMContext, stp_db):
    msg = await callback.message.edit_text(f"""<b>ü§î –°—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞</b>

–û—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –∏ –≤–ª–æ–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º""", reply_markup=back_kb())

    # Initialize list to store message IDs with buttons
    await state.update_data(messages_with_buttons=[msg.message_id])
    await state.set_state(Question.question)


@user_router.message(Question.question)
async def question_text(message: Message, state: FSMContext):
    await state.update_data(question=message.text)
    await state.update_data(question_message_id=message.message_id)

    # Disable buttons from previous step
    await disable_previous_buttons(message, state)

    # Store the message ID of the current step to disable buttons later
    response_msg = await message.answer(f"""<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç</b>

–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–∑ –∫–ª–µ–≤–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å""", reply_markup=back_kb())

    # Add current message to the list
    state_data = await state.get_data()
    messages_with_buttons = state_data.get("messages_with_buttons", [])
    messages_with_buttons.append(response_msg.message_id)
    await state.update_data(messages_with_buttons=messages_with_buttons)

    await state.set_state(Question.clever_link)


@user_router.message(Question.clever_link)
async def clever_link_handler(message: Message, state: FSMContext, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        user: User = await repo.users.get_user(user_id=message.from_user.id)

    clever_link = message.text
    state_data = await state.get_data()

    if not "clever.ertelecom.ru/content/space/" in message.text and user.Role != 10:
        await message.answer(f"""<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç</b>

–°–æ–æ–±—â–µ–Ω–∏–µ <b>–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–µ–≤–µ—Ä</b> ü•∫

–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–∑ –∫–ª–µ–≤–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å""", reply_markup=back_kb())
        return

    # Disable all previous buttons
    await disable_previous_buttons(message, state)

    await message.answer(f"""<b>‚úÖ –£—Å–ø–µ—à–Ω–æ</b>

–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç""", reply_markup=cancel_question_kb())


    new_topic = await message.bot.create_forum_topic(chat_id=config.tg_bot.forum_id, name=user.FIO,
                                                     icon_custom_emoji_id=dicts.topicEmojis["open"])  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
    await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id,
                                        message_thread_id=new_topic.message_thread_id)  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ–ø–∏–∫–∞

    await repo.dialogs.add_dialog(employee_chat_id=message.chat.id,
                                  employee_fullname=user.FIO,
                                  topic_id=new_topic.message_thread_id,
                                  start_time=datetime.datetime.now(),
                                  question=state_data.get("question"),
                                  clever_link=clever_link)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –ë–î

    employee_topics_today = await repo.dialogs.get_dialogs_count_today(employee_fullname=user.FIO)
    employee_topics_month = await repo.dialogs.get_dialogs_count_last_month(employee_fullname=user.FIO)

    topic_info_msg = await message.bot.send_message(chat_id=config.tg_bot.forum_id,
                                                    message_thread_id=new_topic.message_thread_id,
                                                    text=f"""–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–µ—Ç <b>{user.FIO}</b> {'(<a href="https://t.me/' + user.Username + '">–ª—Å</a>)' if user.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" else ""}

<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç:</b> <a href='{clever_link}'>—Ç—ã–∫</a>

<blockquote expandable><b>üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.Position}
<b>üëë –†–ì:</b> {user.Boss}

<b>‚ùì –í–æ–ø—Ä–æ—Å–æ–≤:</b> –∑–∞ –¥–µ–Ω—å {employee_topics_today} / –∑–∞ –º–µ—Å—è—Ü {employee_topics_month}</blockquote>""", disable_web_page_preview=True)

    await message.bot.pin_chat_message(chat_id=config.tg_bot.forum_id,
                                       message_id=topic_info_msg.message_id, disable_notification=True)  # –ü–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ

    await message.bot.copy_message(chat_id=config.tg_bot.forum_id, message_thread_id=new_topic.message_thread_id,
                                   from_chat_id=message.chat.id, message_id=state_data.get(
            "question_message_id"))  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç–æ–ø–∏–∫

    await message.bot.reopen_forum_topic(chat_id=config.tg_bot.forum_id,
                                         message_thread_id=new_topic.message_thread_id)  # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–ø–∏–∫–∞

    await state.clear()


@user_router.callback_query(DialogQualitySpecialist.filter())
async def dialog_quality_employee(callback: CallbackQuery, callback_data: DialogQualitySpecialist, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(user_id=callback.from_user.id)

    await repo.dialogs.update_dialog_quality(token=callback_data.token, quality=callback_data.answer, is_duty=False)
    await callback.answer("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è")
    if callback_data.answer:
            await callback.message.edit_text(f"""<b>üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{duty.FIO}</b> –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥

–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëç –°—Ç–∞—Ä—à–∏–π <b>–ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>""")
    else:
        await callback.message.edit_text(f"""<b>üîí –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{duty.FIO}</b> –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥

–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëé –°—Ç–∞—Ä—à–∏–π <b>–Ω–µ –ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>""")

async def disable_previous_buttons(message: Message, state: FSMContext):
    """Helper function to disable buttons from previous steps"""
    state_data = await state.get_data()
    messages_with_buttons = state_data.get("messages_with_buttons", [])

    for msg_id in messages_with_buttons:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=msg_id,
                reply_markup=None
            )
        except Exception as e:
            # Handle case where message might be deleted or not editable
            print(f"Could not disable buttons for message {msg_id}: {e}")

    # Clear the list after disabling buttons
    await state.update_data(messages_with_buttons=[])


@user_router.message(ActiveQuestion())
async def active_question(message: Message, stp_db, active_dialog_token: str = None):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        dialog: Dialog = await repo.dialogs.get_dialog(token=active_dialog_token)

    await message.bot.copy_message(from_chat_id=message.chat.id, message_id=message.message_id, chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId)
