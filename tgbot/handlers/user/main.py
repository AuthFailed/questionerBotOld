import datetime
import logging

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.keyboards.user.main import (
    CancelQuestion,
    MainMenu,
    back_kb,
    cancel_question_kb,
    user_kb,
)
from tgbot.misc import dicts
from tgbot.misc.helpers import disable_previous_buttons
from tgbot.misc.states import AskQuestion
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import start_inactivity_timer, remove_question_timer

user_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@user_router.message(CommandStart())
async def main_cmd(message: Message, state: FSMContext, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        user: User = await repo.users.get_user(user_id=message.from_user.id)

        employee_topics_today = await repo.questions.get_questions_count_today(
            employee_fullname=user.FIO
        )
        employee_topics_month = await repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )

    division = "–ù–¢–ü" if config.tg_bot.division == "ntp" else "–ù–¶–ö"
    state_data = await state.get_data()

    if user:
        await message.answer(
            f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.FIO}</b>!

–Ø - –±–æ—Ç-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫ {division}

<b>‚ùì –¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
- –ó–∞ –¥–µ–Ω—å {employee_topics_today}
- –ó–∞ –º–µ—Å—è—Ü {employee_topics_month}

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</i>""",
            reply_markup=user_kb(
                is_role_changed=True
                if state_data.get("role") or user.Role == 10
                else False
            ),
        )
        logging.info(
            f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {message.from_user.username} ({message.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ —é–∑–µ—Ä-–º–µ–Ω—é"
        )
    else:
        await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, <b>@{message.from_user.username}</b>!
        
–ù–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ì—Ä–∞—Ñ–∏–∫–æ–≤
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ú–∏–ü

–ï—Å–ª–∏ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ, –Ω–∞–ø–∏—à–∏ <b>/start</b>""")


@user_router.callback_query(MainMenu.filter(F.menu == "main"))
async def main_cb(callback: CallbackQuery, stp_db, state: FSMContext):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        user: User = await repo.users.get_user(user_id=callback.from_user.id)

        employee_topics_today = await repo.questions.get_questions_count_today(
            employee_fullname=user.FIO
        )
        employee_topics_month = await repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )

    division = "–ù–¢–ü" if config.tg_bot.division == "ntp" else "–ù–¶–ö"
    state_data = await state.get_data()

    await callback.message.edit_text(
        f"""–ü—Ä–∏–≤–µ—Ç, <b>{user.FIO}</b>!

–Ø - –±–æ—Ç-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫ {division}

<b>‚ùì –¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
- –ó–∞ –¥–µ–Ω—å {employee_topics_today}
- –ó–∞ –º–µ—Å—è—Ü {employee_topics_month}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ""",
        reply_markup=user_kb(
            is_role_changed=True if state_data.get("role") or user.Role == 10 else False
        ),
    )
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ —é–∑–µ—Ä-–º–µ–Ω—é"
    )


@user_router.callback_query(MainMenu.filter(F.menu == "ask"))
async def ask_question(callback: CallbackQuery, stp_db, state: FSMContext):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        employee: User = await repo.users.get_user(user_id=callback.from_user.id)

    state_data = await state.get_data()

    msg = await callback.message.edit_text(
        """<b>ü§î –°—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞</b>

–û—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –∏ –≤–ª–æ–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º""",
        reply_markup=back_kb(),
    )

    await state.update_data(messages_with_buttons=[msg.message_id])
    await state.set_state(AskQuestion.question)
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or employee.Role == 10 else '[–Æ–∑–µ—Ä]'} {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
    )


@user_router.message(AskQuestion.question)
async def question_text(message: Message, stp_db, state: FSMContext):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        employee: User = await repo.users.get_user(user_id=message.from_user.id)

    await state.update_data(question=message.text)
    await state.update_data(question_message_id=message.message_id)

    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö
    await disable_previous_buttons(message, state)

    response_msg = await message.answer(
        """<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç</b>

–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–∑ –∫–ª–µ–≤–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å""",
        reply_markup=back_kb(),
    )

    state_data = await state.get_data()
    messages_with_buttons = state_data.get("messages_with_buttons", [])
    messages_with_buttons.append(response_msg.message_id)
    await state.update_data(messages_with_buttons=messages_with_buttons)

    await state.set_state(AskQuestion.clever_link)
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or employee.Role == 10 else '[–Æ–∑–µ—Ä]'} {message.from_user.username} ({message.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞"
    )


@user_router.message(AskQuestion.clever_link)
async def clever_link_handler(message: Message, state: FSMContext, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        user: User = await repo.users.get_user(user_id=message.from_user.id)
        employee_topics_today = await repo.questions.get_questions_count_today(
            employee_fullname=user.FIO
        )
        employee_topics_month = await repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )

    clever_link = message.text
    state_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ö–ª–µ–≤–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –†—É—Ç–æ–º
    if "clever.ertelecom.ru/content/space/" not in message.text and user.Role != 10:
        await message.answer(
            """<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç</b>

–°–æ–æ–±—â–µ–Ω–∏–µ <b>–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–µ–≤–µ—Ä</b> ü•∫

–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–∑ –∫–ª–µ–≤–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å""",
            reply_markup=back_kb(),
        )
        return

    # –í—ã–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    await disable_previous_buttons(message, state)

    new_topic = await message.bot.create_forum_topic(
        chat_id=config.tg_bot.forum_id,
        name=user.FIO
        if config.tg_bot.division == "–ù–¶–ö"
        else f"{user.Division} | {user.FIO}",
        icon_custom_emoji_id=dicts.topicEmojis["open"],
    )  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã
    # await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id,
    #                                     message_thread_id=new_topic.message_thread_id)  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã

    new_question = await repo.questions.add_question(
        employee_chat_id=message.chat.id,
        employee_fullname=user.FIO,
        topic_id=new_topic.message_thread_id,
        start_time=datetime.datetime.now(),
        question_text=state_data.get("question"),
        clever_link=clever_link,
    )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ë–î

    await message.answer(
        """<b>‚úÖ –£—Å–ø–µ—à–Ω–æ</b>

–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç""",
        reply_markup=cancel_question_kb(token=new_question.Token),
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "open")
    if new_question.Status == "open" and config.tg_bot.activity_status:
        start_inactivity_timer(new_question.Token, message.bot, stp_db)

    topic_info_msg = await message.bot.send_message(
        chat_id=config.tg_bot.forum_id,
        message_thread_id=new_topic.message_thread_id,
        text=f"""–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–µ—Ç <b>{user.FIO}</b> {'(<a href="https://t.me/' + user.Username + '">–ª—Å</a>)' if (user.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" or user.Username != "–°–∫—Ä—ã—Ç–æ/–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ") else ""}

<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç:</b> <a href='{clever_link}'>—Ç—ã–∫</a>

<blockquote expandable><b>üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.Position}
<b>üëë –†–ì:</b> {user.Boss}

<b>‚ùì –í–æ–ø—Ä–æ—Å–æ–≤:</b> –∑–∞ –¥–µ–Ω—å {employee_topics_today} / –∑–∞ –º–µ—Å—è—Ü {employee_topics_month}</blockquote>""",
        disable_web_page_preview=True,
    )

    await message.bot.copy_message(
        chat_id=config.tg_bot.forum_id,
        message_thread_id=new_topic.message_thread_id,
        from_chat_id=message.chat.id,
        message_id=state_data.get("question_message_id"),
    )  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç–µ–º—É

    # await message.bot.reopen_forum_topic(chat_id=config.tg_bot.forum_id,
    #                                      message_thread_id=new_topic.message_thread_id)  # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã

    await message.bot.pin_chat_message(
        chat_id=config.tg_bot.forum_id,
        message_id=topic_info_msg.message_id,
        disable_notification=True,
    )  # –ü–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ

    await state.clear()
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {message.from_user.username} ({message.from_user.id}): –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å {new_question.Token}"
    )


@user_router.callback_query(CancelQuestion.filter(F.action == "cancel"))
async def cancel_question(
    callback: CallbackQuery, callback_data: CancelQuestion, stp_db, state: FSMContext
):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        question: Question = await repo.questions.get_question(
            token=callback_data.token
        )

    if (
        question
        and question.Status == "open"
        and not question.TopicDutyFullname
        and not question.EndTime
    ):
        await callback.bot.edit_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.TopicId,
            icon_custom_emoji_id=dicts.topicEmojis["fired"],
        )
        await callback.bot.close_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
        )
        await remove_question_timer(bot=callback.bot, question=question, stp_db=stp_db)
        await callback.bot.send_message(chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId, text="""<b>üî• –û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞</b>
        
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–º–µ–Ω–∏–ª –≤–æ–ø—Ä–æ—Å

<i>–í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>""")
        await callback.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        await main_cb(callback=callback, state=state, stp_db=stp_db)
    elif not question:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–º–µ–Ω—è–µ–º—ã–π –≤–æ–ø—Ä–æ—Å")
        await main_cb(callback=callback, state=state, stp_db=stp_db)
    else:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω. –û–Ω —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ")