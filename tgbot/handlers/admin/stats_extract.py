import logging
from datetime import datetime
from io import BytesIO

import pandas as pd
from aiogram import F, Router
from aiogram.types import BufferedInputFile, CallbackQuery

from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.admin import AdminFilter
from tgbot.keyboards.admin.main import AdminMenu
from tgbot.keyboards.admin.stats_extract import StatsExtract, extract_kb
from tgbot.services.logger import setup_logging

stats_router = Router()
stats_router.message.filter(AdminFilter())

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)

@stats_router.callback_query(AdminMenu.filter(F.menu == "stats_extract"))
async def extract_stats(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        f"""<b>üì• –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

–í—ã–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è <b>{config.tg_bot.division}</b>

<i>–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ–Ω—é</i>""",
        reply_markup=extract_kb(),
    )
    await callback.answer()


@stats_router.callback_query(StatsExtract.filter(F.menu == "month"))
async def admin_extract_month(
    callback: CallbackQuery, callback_data: StatsExtract, repo: RequestsRepo
) -> None:
    logger.info("we are here")
    month = callback_data.month
    year = callback_data.year

    questions = await repo.questions.get_questions_by_month(
        month, year, division=config.tg_bot.division
    )

    data = []
    for question_row in questions:
        question = question_row[0]

        match question.QualityEmployee:
            case None:
                quality_employee = "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
            case True:
                quality_employee = "–•–æ—Ä–æ—à–æ"
            case False:
                quality_employee = "–ü–ª–æ—Ö–æ"
            case _:
                quality_employee = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        match question.QualityDuty:
            case None:
                quality_duty = "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
            case True:
                quality_duty = "–•–æ—Ä–æ—à–æ"
            case False:
                quality_duty = "–ü–ª–æ—Ö–æ"
            case _:
                quality_duty = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        match question.Status:
            case "open":
                status = "–û—Ç–∫—Ä—ã—Ç"
            case "in_progress":
                status = "–í —Ä–∞–±–æ—Ç–µ"
            case "closed":
                status = "–ó–∞–∫—Ä—ã—Ç"
            case "lost":
                status = "–ü–æ—Ç–µ—Ä—è–Ω"
            case "fired":
                status = "–£–¥–∞–ª–µ–Ω"
            case _:
                status = "–ó–∞–∫—Ä—ã—Ç"

        match question.AllowReturn:
            case True:
                AllowReturn = "–î–æ—Å—Ç—É–ø–µ–Ω"
            case False:
                AllowReturn = "–ó–∞–ø—Ä–µ—â–µ–Ω"
            case _:
                AllowReturn = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        data.append(
            {
                "–¢–æ–∫–µ–Ω": question.Token,
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": question.EmployeeFullname,
                "–°—Ç–∞—Ä—à–∏–π": question.TopicDutyFullname,
                "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞": question.QuestionText,
                "–í—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞": question.StartTime,
                "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è": question.EndTime,
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –ë–ó": question.CleverLink,
                "–û—Ü–µ–Ω–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞": quality_employee,
                "–û—Ü–µ–Ω–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ": quality_duty,
                "–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞": status,
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞": AllowReturn,
            }
        )

    if not data:
        await callback.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª excel –≤ –ø–∞–º—è—Ç–∏
    df = pd.DataFrame(data)
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="openpyxl") as writer:
        df.to_excel(
            writer, sheet_name=f"{config.tg_bot.division} - {month}_{year}", index=False
        )

    excel_buffer.seek(0)

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    month_names = {
        1: "—è–Ω–≤–∞—Ä—å",
        2: "—Ñ–µ–≤—Ä–∞–ª—å",
        3: "–º–∞—Ä—Ç",
        4: "–∞–ø—Ä–µ–ª—å",
        5: "–º–∞–π",
        6: "–∏—é–Ω—å",
        7: "–∏—é–ª—å",
        8: "–∞–≤–≥—É—Å—Ç",
        9: "—Å–µ–Ω—Ç—è–±—Ä—å",
        10: "–æ–∫—Ç—è–±—Ä—å",
        11: "–Ω–æ—è–±—Ä—å",
        12: "–¥–µ–∫–∞–±—Ä—å",
    }

    filename = (
        f"–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ {config.tg_bot.division} - {month_names[month]} {year}.xlsx"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
    excel_file = BufferedInputFile(excel_buffer.getvalue(), filename=filename)

    await callback.message.answer_document(
        excel_file, caption=f"{month_names[month]} {year}"
    )

    await callback.answer()


@stats_router.callback_query(StatsExtract.filter(F.menu == "bulk"))
async def admin_extract_bulk(
    callback: CallbackQuery, callback_data: StatsExtract, repo: RequestsRepo
) -> None:
    months_count = callback_data.months
    current_date = datetime.now()

    all_data = []

    # Collect data for the specified number of months
    for i in range(months_count):
        year = current_date.year
        month = current_date.month - i
        if month <= 0:
            month += 12
            year -= 1

        questions = await repo.questions.get_questions_by_month(
            month, year, division=config.tg_bot.division
        )

        for question_row in questions:
            question = question_row[0]

            match question.QualityEmployee:
                case None:
                    quality_employee = "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
                case True:
                    quality_employee = "–•–æ—Ä–æ—à–æ"
                case False:
                    quality_employee = "–ü–ª–æ—Ö–æ"
                case _:
                    quality_employee = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            match question.QualityDuty:
                case None:
                    quality_duty = "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
                case True:
                    quality_duty = "–•–æ—Ä–æ—à–æ"
                case False:
                    quality_duty = "–ü–ª–æ—Ö–æ"
                case _:
                    quality_duty = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            match question.Status:
                case "open":
                    status = "–û—Ç–∫—Ä—ã—Ç"
                case "in_progress":
                    status = "–í —Ä–∞–±–æ—Ç–µ"
                case "closed":
                    status = "–ó–∞–∫—Ä—ã—Ç"
                case "lost":
                    status = "–ü–æ—Ç–µ—Ä—è–Ω"
                case "fired":
                    status = "–£–¥–∞–ª–µ–Ω"
                case _:
                    status = "–ó–∞–∫—Ä—ã—Ç"

            match question.AllowReturn:
                case True:
                    AllowReturn = "–î–æ—Å—Ç—É–ø–µ–Ω"
                case False:
                    AllowReturn = "–ó–∞–ø—Ä–µ—â–µ–Ω"
                case _:
                    AllowReturn = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            all_data.append(
                {
                    "–¢–æ–∫–µ–Ω": question.Token,
                    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": question.EmployeeFullname,
                    "–°—Ç–∞—Ä—à–∏–π": question.TopicDutyFullname,
                    "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞": question.QuestionText,
                    "–í—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞": question.StartTime,
                    "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è": question.EndTime,
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –ë–ó": question.CleverLink,
                    "–û—Ü–µ–Ω–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞": quality_employee,
                    "–û—Ü–µ–Ω–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ": quality_duty,
                    "–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞": status,
                    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞": AllowReturn,
                }
            )

    if not all_data:
        await callback.message.answer(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months_count} –º–µ—Å—è—Ü–µ–≤."
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª excel –≤ –ø–∞–º—è—Ç–∏
    df = pd.DataFrame(all_data)

    # Sort by date
    df = df.sort_values("–í—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞", ascending=False)

    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="openpyxl") as writer:
        df.to_excel(
            writer,
            sheet_name=f"{config.tg_bot.division} - {months_count} –º–µ—Å—è—Ü–µ–≤",
            index=False,
        )

    excel_buffer.seek(0)

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ {config.tg_bot.division} - –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months_count} –º–µ—Å—è—Ü–µ–≤.xlsx"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
    excel_file = BufferedInputFile(excel_buffer.getvalue(), filename=filename)

    await callback.message.answer_document(
        excel_file, caption=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {months_count} –º–µ—Å—è—Ü–µ–≤"
    )

    await callback.answer()