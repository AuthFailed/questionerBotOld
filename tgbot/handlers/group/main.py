import logging
from typing import Sequence

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.topic import IsTopicMessage
from tgbot.handlers.group.cmds import end_q_cmd
from tgbot.keyboards.user.main import (
    QuestionQualityDuty,
    closed_dialog_kb,
    finish_question_kb,
)
from tgbot.misc import dicts
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import (
    restart_inactivity_timer,
    start_inactivity_timer,
)

topic_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@topic_router.message(IsTopicMessage())
async def handle_q_message(message: Message, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(message.from_user.id)
        topic: Question = await repo.dialogs.get_question(
            topic_id=message.message_thread_id
        )

    if message.text == "‚úÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å":
        await end_q_cmd(message, stp_db)
        return

    if topic is not None:
        if not topic.TopicDutyFullname:
            await repo.dialogs.update_question_duty(
                token=topic.Token, topic_duty=duty.FIO
            )
            await repo.dialogs.update_question_status(
                token=topic.Token, status="in_progress"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            if config.tg_bot.activity_status:
                start_inactivity_timer(topic.Token, message.bot, stp_db)

            duty_topics_today = await repo.dialogs.get_questions_count_today(
                duty_fullname=duty.FIO
            )
            duty_topics_month = await repo.dialogs.get_questions_count_last_month(
                duty_fullname=duty.FIO
            )

            await message.bot.edit_forum_topic(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=topic.TopicId,
                icon_custom_emoji_id=dicts.topicEmojis["in_progress"],
            )
            await message.answer(
                f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–∞–µ—Ç <b>{duty.FIO}</b> {'(<a href="https://t.me/' + duty.Username + '">–ª—Å</a>)' if (duty.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" or duty.Username != "–°–∫—Ä—ã—Ç–æ/–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ") else ""}

<blockquote expandable><b>‚öíÔ∏è –†–µ—à–µ–Ω–æ:</b> –∑–∞ –¥–µ–Ω—å {duty_topics_today} / –∑–∞ –º–µ—Å—è—Ü {duty_topics_month}</blockquote>""",
                disable_web_page_preview=True,
            )

            employee: User = await repo.users.get_user(fullname=topic.EmployeeFullname)
            await message.bot.send_message(
                chat_id=employee.ChatId,
                text=f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–°—Ç–∞—Ä—à–∏–π <b>{duty.FIO}</b> –≤–∑—è–ª –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É""",
                reply_markup=finish_question_kb(),
            )
            await message.bot.copy_message(
                from_chat_id=config.tg_bot.forum_id,
                message_id=message.message_id,
                chat_id=employee.ChatId,
            )
        else:
            if topic.TopicDutyFullname == duty.FIO:
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ
                if config.tg_bot.activity_status:
                    restart_inactivity_timer(topic.Token, message.bot, stp_db)

                await message.bot.copy_message(
                    from_chat_id=config.tg_bot.forum_id,
                    message_id=message.message_id,
                    chat_id=topic.EmployeeChatId,
                )
            else:
                await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>
                
–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</i>""")

    else:
        await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
        await message.bot.close_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=message.message_id
        )
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–º—É {message.message_thread_id}. –ó–∞–∫—Ä—ã–ª–∏ —Ç–µ–º—É")


@topic_router.callback_query(QuestionQualityDuty.filter(F.return_question))
async def return_q_duty(
    callback: CallbackQuery, callback_data: QuestionQualityDuty, stp_db
):
    await callback.answer()
    async with stp_db() as session:
        repo = RequestsRepo(session)
        employee: User = await repo.users.get_user(user_id=callback.from_user.id)
        question: Question = await repo.dialogs.get_question(token=callback_data.token)
        duty: User = await repo.users.get_user(user_id=callback.from_user.id)
        available_to_return_questions: Sequence[
            Question
        ] = await repo.dialogs.get_available_to_return_questions()

    active_dialogs = await repo.dialogs.get_active_questions()

    if (
        question.Status == "closed"
        and employee.FIO not in [d.EmployeeFullname for d in active_dialogs]
        and question.Token in [d.Token for d in available_to_return_questions]
        and question.TopicDutyFullname == duty.FIO
    ):
        await repo.dialogs.update_question_status(token=question.Token, status="open")
        await callback.bot.edit_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.TopicId,
            name=employee.FIO,
            icon_custom_emoji_id=dicts.topicEmojis["open"],
        )
        await callback.bot.reopen_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
        )

        await callback.message.answer("""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É""")
        await callback.bot.send_message(
            chat_id=question.EmployeeChatId,
            text=f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{employee.FIO}</b> –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å:
<blockquote expandable><i>{question.QuestionText}</i></blockquote>""",
            reply_markup=finish_question_kb(),
        )
    elif question.TopicDutyFullname != duty.FIO:
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!", show_alert=True)
    elif employee.FIO in [d.EmployeeFullname for d in active_dialogs]:
        await callback.answer(
            "–£ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True
        )
    elif question.Token not in [d.Token for d in available_to_return_questions]:
        await callback.answer(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å. –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤", show_alert=True
        )
    elif question.Status != "closed":
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)


@topic_router.callback_query(IsTopicMessage() and QuestionQualityDuty.filter())
async def quality_q_duty(
    callback: CallbackQuery, callback_data: QuestionQualityDuty, stp_db
):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(user_id=callback.from_user.id)
        question: Question = await repo.dialogs.get_question(token=callback_data.token)

    if question.TopicDutyFullname == duty.FIO:
        await repo.dialogs.update_question_quality(
            token=callback_data.token, quality=callback_data.answer, is_duty=True
        )
        await callback.answer("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è")
        if callback_data.answer:
            await callback.message.edit_text(
                f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

<b>{duty.FIO}</b> –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëé –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                reply_markup=closed_dialog_kb(token=callback_data.token, role="duty"),
            )
        else:
            await callback.message.edit_text(
                f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

<b>{duty.FIO}</b> –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–Ω–µ –º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                reply_markup=closed_dialog_kb(token=callback_data.token, role="duty"),
            )
    else:
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!", show_alert=True)
