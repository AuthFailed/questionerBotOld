import datetime
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from infrastructure.database.models import User, Question
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.topic import IsTopicMessage, IsTopicMessageWithCommand
from tgbot.keyboards.user.main import dialog_quality_kb, QuestionQualityDuty, closed_dialog_kb
from tgbot.misc import dicts
from tgbot.services.logger import setup_logging

topic_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@topic_router.message(IsTopicMessageWithCommand("end"))
async def end_cmd(message: Message, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(message.from_user.id)
        topic: Question = await repo.dialogs.get_dialog(topic_id=message.message_thread_id)

    if topic is not None:
        if topic.Status != "closed" and topic.TopicDutyFullname == duty.FIO:
            await repo.dialogs.update_dialog_status(token=topic.Token, status="closed")
            await repo.dialogs.update_dialog_end(token=topic.Token, end_time=datetime.datetime.now())

            await message.reply(f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

–û—Ü–µ–Ω–∏, –º–æ–≥ –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ä–µ—à–∏—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ""",
                                reply_markup=dialog_quality_kb(token=topic.Token, role="duty"))

            await message.bot.edit_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=topic.TopicId,
                                               name=topic.Token,
                                               icon_custom_emoji_id=dicts.topicEmojis["closed"])
            await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=topic.TopicId)

            employee: User = await repo.users.get_user(fullname=topic.EmployeeFullname)
            await message.bot.send_message(chat_id=employee.ChatId, text=f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{duty.FIO}</b> –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å
–û—Ü–µ–Ω–∏, –ø–æ–º–æ–≥–ª–∏ –ª–∏ —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –µ–≥–æ""", reply_markup=dialog_quality_kb(token=topic.Token, role="employee"))
        elif topic.Status != "closed" and topic.TopicDutyFullname != duty.FIO:
            await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!""")
        elif topic.Status == "closed":
            await message.reply("<b>üîí –í–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç</b>")
            await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=topic.TopicId)

    else:
        await message.answer(f"""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ""")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–º—É {message.message_thread_id}")


@topic_router.message(IsTopicMessageWithCommand("release"))
async def release_cmd(message: Message, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(message.from_user.id)
        topic: Question = await repo.dialogs.get_dialog(topic_id=message.message_thread_id)

    if topic is not None:
        if topic.TopicDutyFullname is not None and topic.TopicDutyFullname == duty.FIO:
            await repo.dialogs.update_topic_duty(token=topic.Token, topic_duty=None)
            await repo.dialogs.update_dialog_status(token=topic.Token, status="open")

            await message.bot.edit_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=topic.TopicId,
                                               icon_custom_emoji_id=dicts.topicEmojis["open"])
            await message.answer(f"""<b>üïäÔ∏è –í–æ–ø—Ä–æ—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω</b>

–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∑—è—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç—É —Ç–µ–º—É""")

            employee: User = await repo.users.get_user(fullname=topic.EmployeeFullname)
            await message.bot.send_message(chat_id=employee.ChatId, text=f"""<b>üïäÔ∏è –°—Ç–∞—Ä—à–∏–π –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{duty.FIO}</b> –æ—Å–≤–æ–±–æ–¥–∏–ª –≤–æ–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ–≥–æ""")
        elif topic.TopicDutyFullname is not None and topic.TopicDutyFullname != duty.FIO:
            await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!""")
        elif topic.TopicDutyFullname is None:
            await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ —á–∞—Ç —Å–µ–π—á–∞—Å –Ω–∏–∫–µ–º –Ω–µ –∑–∞–Ω—è—Ç!""")

    else:
        await message.answer(f"""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
        await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=message.message_id)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–º—É {message.message_thread_id}. –ó–∞–∫—Ä—ã–ª–∏ —Ç–µ–º—É")


@topic_router.message(IsTopicMessage())
async def handle_topic_message(message: Message, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(message.from_user.id)
        topic: Question = await repo.dialogs.get_dialog(topic_id=message.message_thread_id)

    if topic is not None:
        if not topic.TopicDutyFullname:
            await repo.dialogs.update_topic_duty(token=topic.Token, topic_duty=duty.FIO)
            await repo.dialogs.update_dialog_status(token=topic.Token, status="in_progress")

            duty_topics_today = await repo.dialogs.get_dialogs_count_today(duty_fullname=duty.FIO)
            duty_topics_month = await repo.dialogs.get_dialogs_count_last_month(duty_fullname=duty.FIO)

            await message.bot.edit_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=topic.TopicId,
                                               icon_custom_emoji_id=dicts.topicEmojis["in_progress"])
            await message.answer(f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–∞–µ—Ç <b>{duty.FIO}</b> {'(<a href="https://t.me/' + duty.Username + '">–ª—Å</a>)' if duty.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" else ""}

<blockquote expandable><b>‚öíÔ∏è –†–µ—à–µ–Ω–æ:</b> –∑–∞ –¥–µ–Ω—å {duty_topics_today} / –∑–∞ –º–µ—Å—è—Ü {duty_topics_month}</blockquote>""",
                                 disable_web_page_preview=True)

            employee: User = await repo.users.get_user(fullname=topic.EmployeeFullname)
            await message.bot.send_message(chat_id=employee.ChatId, text=f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–°—Ç–∞—Ä—à–∏–π <b>{duty.FIO}</b> –≤–∑—è–ª –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É""")
            await message.bot.copy_message(from_chat_id=config.tg_bot.forum_id, message_id=message.message_id,
                                           chat_id=employee.ChatId)
        else:
            if topic.TopicDutyFullname == duty.FIO:
                await message.bot.copy_message(from_chat_id=config.tg_bot.forum_id, message_id=message.message_id,
                                               chat_id=topic.EmployeeChatId)
            else:
                await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>
                
–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!""")

    else:
        await message.answer(f"""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
        await message.bot.close_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=message.message_id)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–º—É {message.message_thread_id}. –ó–∞–∫—Ä—ã–ª–∏ —Ç–µ–º—É")


@topic_router.callback_query(QuestionQualityDuty.filter(F.return_dialog == True))
async def return_dialog_by_duty(callback: CallbackQuery, callback_data: QuestionQualityDuty, stp_db):
    await callback.answer()
    async with stp_db() as session:
        repo = RequestsRepo(session)
        employee: User = await repo.users.get_user(user_id=callback.from_user.id)
        dialog: Question = await repo.dialogs.get_dialog(token=callback_data.token)
        duty: User = await repo.users.get_user(user_id=callback.from_user.id)

    active_dialogs = await repo.dialogs.get_active_dialogs()

    if dialog.Status == "closed" and employee.FIO not in [d.EmployeeFullname for d in active_dialogs] and dialog.TopicDutyFullname == duty.FIO:
        await repo.dialogs.update_dialog_status(token=dialog.Token, status="open")
        await callback.bot.edit_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId,
                                            name=employee.FIO, icon_custom_emoji_id=dicts.topicEmojis["open"])
        await callback.bot.reopen_forum_topic(chat_id=config.tg_bot.forum_id, message_thread_id=dialog.TopicId)

        await callback.message.answer(f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É""")
        await callback.bot.send_message(chat_id=dialog.EmployeeChatId, text=f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{employee.FIO}</b> –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å:
<blockquote expandable><i>{dialog.QuestionText}</i></blockquote>""")
    elif dialog.TopicDutyFullname != duty.FIO:
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!", show_alert=True)
    elif employee.FIO in [d.EmployeeFullname for d in active_dialogs]:
        await callback.answer("–£ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True)
    elif dialog.Status != "closed":
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)


@topic_router.callback_query(IsTopicMessage() and QuestionQualityDuty.filter())
async def dialog_quality_duty(callback: CallbackQuery, callback_data: QuestionQualityDuty, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(user_id=callback.from_user.id)
        dialog: Question = await repo.dialogs.get_dialog(token=callback_data.token)

    if dialog.TopicDutyFullname == duty.FIO:
        await repo.dialogs.update_dialog_quality(token=callback_data.token, quality=callback_data.answer, is_duty=True)
        await callback.answer("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è")
        if callback_data.answer:
            await callback.message.edit_text(f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

<b>{duty.FIO}</b> –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëé –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                                             reply_markup=closed_dialog_kb(token=callback_data.token, role="duty"))
        else:
            await callback.message.edit_text(f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

<b>{duty.FIO}</b> –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–Ω–µ –º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                                             reply_markup=closed_dialog_kb(token=callback_data.token, role="duty"))
    else:
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!", show_alert=True)
