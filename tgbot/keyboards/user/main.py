from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from tgbot.keyboards.admin.main import AdminMenu


class MainMenu(CallbackData, prefix='menu'):
    menu: str


class QuestionQualitySpecialist(CallbackData, prefix='d_quality_spec'):
    answer: bool = False
    token: str = None
    return_dialog: bool = False


class QuestionQualityDuty(CallbackData, prefix='d_quality_duty'):
    answer: bool = False
    token: str = None
    return_dialog: bool = False


class ReturnQuestion(CallbackData, prefix='return_q'):
    action: str
    token: str = None


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def user_kb(is_role_changed: bool = False) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="ask").pack()),
            InlineKeyboardButton(text="üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞", callback_data=MainMenu(menu="return").pack()),
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –µ—Å–ª–∏ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è
    if is_role_changed:
        buttons.append([
            InlineKeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å", callback_data=AdminMenu(menu="reset").pack()),
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def back_kb() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()),
        ]
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç–º–µ–Ω–æ–π –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def cancel_question_kb() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="main").pack()),
        ]
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç–º–µ–Ω–æ–π –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def finish_question_kb() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="main").pack()),
        ]
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –¥–∏–∞–ª–æ–≥–∞
def dialog_quality_kb(token: str, role: str = "employee") -> InlineKeyboardMarkup:
    if role == "employee":
        buttons = [
            [
                InlineKeyboardButton(text="üëç –î–∞",
                                     callback_data=QuestionQualitySpecialist(answer=True, token=token).pack()),
                InlineKeyboardButton(text="üëé –ù–µ—Ç",
                                     callback_data=QuestionQualitySpecialist(answer=False, token=token).pack()),
            ],
            [
                InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                                     callback_data=QuestionQualitySpecialist(return_dialog=True, token=token).pack())
            ], [
                InlineKeyboardButton(text="ü§î –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="ask").pack())
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MainMenu(menu="main").pack())
            ]
        ]
    else:
        buttons = [
            [
                InlineKeyboardButton(text="üëé –î–∞",
                                     callback_data=QuestionQualityDuty(answer=False, token=token).pack()),
                InlineKeyboardButton(text="üëç –ù–µ—Ç",
                                     callback_data=QuestionQualityDuty(answer=True, token=token).pack()),
            ],
            [
                InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                                     callback_data=QuestionQualityDuty(return_dialog=True, token=token).pack())
            ]
        ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def closed_dialog_kb(token: str, role: str = "employee") -> InlineKeyboardMarkup:
    if role == "employee":
        buttons = [
            [
                InlineKeyboardButton(text="ü§î –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="ask").pack()),
                InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                                     callback_data=QuestionQualitySpecialist(return_dialog=True, token=token).pack())
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MainMenu(menu="main").pack())
            ]
        ]
    else:
        buttons = [
            [
                InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                                     callback_data=QuestionQualityDuty(return_dialog=True, token=token).pack())
            ]
        ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def questions_list_kb(questions) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    buttons = []

    for question in questions:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º EndTime –≤–º–µ—Å—Ç–æ StartTime –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        date_str = question.EndTime.strftime("%d.%m.%Y %H:%M") if question.EndTime else question.StartTime.strftime("%d.%m.%Y")
        buttons.append([
            InlineKeyboardButton(
                text=f"üìÖ {date_str}",
                callback_data=ReturnQuestion(action="show", token=question.Token).pack()
            )
        ])

    buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack())
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def question_confirm_kb(token: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –≤–µ—Ä–Ω—É—Ç—å",
                                 callback_data=ReturnQuestion(action="confirm", token=token).pack()),
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="return").pack())
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
