from typing import Sequence

from aiogram.filters.callback_data import CallbackData
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)

from infrastructure.database.models import Question
from tgbot.keyboards.admin.main import AdminMenu


class MainMenu(CallbackData, prefix="menu"):
    menu: str


class QuestionQualitySpecialist(CallbackData, prefix="q_quality_spec"):
    answer: bool = False
    token: str = None
    return_question: bool = False


class ReturnQuestion(CallbackData, prefix="return_q"):
    action: str
    token: str = None


class CancelQuestion(CallbackData, prefix="cancel_q"):
    action: str
    token: str


def user_kb(is_role_changed: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    :param bool is_role_changed: –ò–∑–º–µ–Ω–µ–Ω–∞ –ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="ask").pack()
            ),
            InlineKeyboardButton(
                text="üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞", callback_data=MainMenu(menu="return").pack()
            ),
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –µ—Å–ª–∏ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è
    if is_role_changed:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å", callback_data=AdminMenu(menu="reset").pack()
                ),
            ]
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def back_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def cancel_question_kb(token: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç–º–µ–Ω–æ–π –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=CancelQuestion(action="cancel", token=token).pack(),
            ),
        ]
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def finish_question_kb() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç–º–µ–Ω–æ–π –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            KeyboardButton(text="‚úÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å"),
        ]
    ]

    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons, resize_keyboard=True, one_time_keyboard=True
    )
    return keyboard


def dialog_quality_specialist_kb(
    token: str,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–º–æ—â–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.

    :param str token: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ–ø—Ä–æ—Å–∞
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üëç –î–∞",
                callback_data=QuestionQualitySpecialist(
                    answer=True, token=token
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üëé –ù–µ—Ç",
                callback_data=QuestionQualitySpecialist(
                    answer=False, token=token
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=QuestionQualitySpecialist(
                    return_question=True, token=token
                ).pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="ü§î –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="ask").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MainMenu(menu="main").pack()
            )
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def closed_dialog_specialist_kb(token: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.

    :param token: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ–ø—Ä–æ—Å–∞
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="ü§î –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=MainMenu(menu="ask").pack()
            ),
            InlineKeyboardButton(
                text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=QuestionQualitySpecialist(
                    return_question=True, token=token
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MainMenu(menu="main").pack()
            )
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def questions_list_kb(questions: Sequence[Question]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –≤–æ–∑–≤—Ä–∞—Ç—É –≤–æ–ø—Ä–æ—Å–æ–≤

    :param Sequence[Question] questions: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    """
    buttons = []

    for question in questions:
        date_str = (
            question.EndTime.strftime("%d.%m.%Y %H:%M")
            if question.EndTime
            else question.StartTime.strftime("%d.%m.%Y")
        )
        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"üìÖ {date_str} | {question.QuestionText}",
                    callback_data=ReturnQuestion(
                        action="show", token=question.Token
                    ).pack(),
                )
            ]
        )

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def question_confirm_kb(token: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É

    :param str token: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ–ø—Ä–æ—Å–∞
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞, –≤–µ—Ä–Ω—É—Ç—å",
                callback_data=ReturnQuestion(action="confirm", token=token).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="return").pack()
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
